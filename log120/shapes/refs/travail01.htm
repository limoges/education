<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>LOG120 - Travail 01 : Gestion de formes</title>
<link rel="stylesheet" type="text/css" href="../../../css/styles_base.css">
<link rel="stylesheet" type="text/css" href="../../../css/liens.css">
</head>
<body> 
<h1>Gestion de formes</h1> 

<h2>But du laboratoire</h2> 
<p>Le but de ce laboratoire est de vous familiariser avec l'environnement de d&eacute;veloppement de logiciels disponible pour le langage Java. Vous devrez utiliser la documentation du SDK (Software Development Kit) et les diff&eacute;rents outils de compilation et d'ex&eacute;cution de programmes disponibles au laboratoire. </p> 
<p>Ce laboratoire propose d'int&eacute;grer diff&eacute;rentes notions pour exploiter davantage vos aptitudes de programmeur :</p> 
<ul> 
  <li>programmation orient&eacute;e objet</li> 
  <ul> 
    <li>programmer des concepts orientés-objets (classe, sous-classe, h&eacute;ritage)</li> 
    <li>utiliser des m&eacute;thodes pour faire interagir des objets</li> 
    <li>concevoir un diagramme de classes en UML</li> 
    <li>r&eacute;diger et faire compiler un fichier .java source</li> 
    <li>ex&eacute;cuter une application Java</li> 
  </ul> 
  <li>client-serveur</li> 
  <ul> 
    <li>ouvrir, lire, écrire et fermer un socket</li> 
    <li>utiliser le protocole TCP/IP</li> 
  </ul> 
  <li>contexte graphique</li> 
  <ul> 
    <li>afficher/effacer une forme dans une fen&ecirc;tre</li> 
  </ul> 
  <li>ligne de commande textuelle</li> 
  <ul> 
    <li>d&eacute;cortiquer un texte (Integer.parseInt, String.split, java.util.regex, etc.)</li> 
  </ul> 
  <li>etc.</li> 
</ul> 
<p>Un dernier but est de vous apprendre &agrave; planifier le travail pour un projet d'envergure, en d&eacute;composant le probl&egrave;me en t&acirc;ches et en fixant les dates pour des &eacute;v&eacute;nements jalons (milestones) afin de terminer le travail dans le temps allou&eacute;.</p> 

<h2>Description du laboratoire</h2> 
<p>Le laboratoire consiste &agrave; concevoir une application client permettant d'afficher diff&eacute;rentes formes g&eacute;om&eacute;triques primitives provenant d'un serveur. </p> 

<h2>Description du serveur</h2> 
<p>Le serveur que vous devrez utiliser est une petite application TCP/IP qui r&eacute;pond uniquement &agrave; deux commandes envoy&eacute;es par la connexion r&eacute;seau :</p> 
<ul> 
  <li><b>END</b> qui permet de terminer l'ex&eacute;cution du serveur</li> 
  <li><b>GET</b> qui permet d'obtenir une ligne textuelle qui comprend le nom d'une forme g&eacute;om&eacute;trique simple ainsi que les param&egrave;tres l'accompagnant. </li> 
</ul> 
<h3>Description d'une forme</h3> 
<p>La ligne provenant de la commande GET d&eacute;crit l'une des formes suivantes&nbsp;:</p> 
<blockquote> 
  <p> <b>nseq</b> &lt;CARRE&gt; <b> x1 y1 x2 y2</b> &lt;/CARRE&gt; <br> 
    <b>nseq</b> &lt;RECTANGLE&gt;<b> </b> <b>x1 y1 x2 y2</b> &lt;/RECTANGLE&gt; <br> 
    <b>nseq</b> &lt;CERCLE&gt; <b>centreX centreY rayon</b> &lt;/CERCLE&gt; <br> 
    <b>nseq</b> &lt;OVALE&gt; <b>centreX centreY rayonH rayonV</b> &lt;/OVALE&gt;<br> 
    <b>nseq</b> &lt;LIGNE&gt; <b>x1 y1 x2 y2</b> &lt;/LIGNE&gt;</p> 
</blockquote> 
<p>Pour toutes les formes, <b>nseq </b>est un num&eacute;ro de s&eacute;quence codifi&eacute; qui identifie la forme. </p> 
<p>Pour le carr&eacute;, le rectangle et la ligne, <b>x1 y1 x2 y2</b> repr&eacute;sentent les coordonn&eacute;es absolues des sommets par rapport &agrave; la fen&ecirc;tre graphique.</p> 
<p>Pour l'ellipse (ovale), <b>rayonH</b> repr&eacute;sente le rayon horizontal et <b>rayonV</b> repr&eacute;sente le rayon vertical. Les axes des ellipses sont parall&egrave;les aux axes de l'&eacute;cran.</p> 
<p>Et bien s&ucirc;r, <b>centreX</b> et<b> centreY</b> repr&eacute;sentent la coordonn&eacute;e (x,y) du centre d'un cercle ou d'une ellipse.</p> 
<h3>Fonctionnement manuel du serveur</h3> 
<p>Vous pouvez v&eacute;rifier le bon fonctionnement du serveur de la fa&ccedil;on suivante&nbsp;:</p> 
<p>T&eacute;l&eacute;chargez et lancer le <a href="#ServeurForme">serveur de forme</a> sur votre machine locale. </p> 
<p>Dans une fen&ecirc;tre de commande (DOS, unix, etc.), tapez la commande: <span class="codeExample">telnet localhost 10000</span></p> 
<p>Une fois connect&eacute;, vous aurez le "prompt" suivant :</p> 
<blockquote> 
  <p><tt class=invert>commande&gt;<br> 
&nbsp;</tt></p> 
</blockquote> 
<p>Si vous entrez la commande <b>GET</b>, vous aurez une forme et ses param&egrave;tres tels que nous les avons d&eacute;crits plus haut. Si vous entrez la commande <b>END</b> le serveur terminera son ex&eacute;cution. <em>Note : il y a un retour chariot ('\n') envoy&eacute; par le serveur apr&egrave;s le prompt</em>. </p> 
<h2>Sp&eacute;cifications de l'application client &agrave; r&eacute;aliser</h2> 
<p>Vous devez r&eacute;aliser une application client qui pourra se connecter au serveur, en utilisant un protocole TCP/IP (par exemple, sur le port 10000) et qui utilisera les deux commandes disponibles pour interagir avec ce dernier.</p> 
<p>Le client doit ouvrir une fen&ecirc;tre graphique de 500 pixels par 500 pixels.</p> 
<p>Le client doit offrir les options pour quitter l'application et établir et suspendre une connexion avec le serveur. Pour établir une connexion, il faut obtenir le nom du serveur et le port TCP/IP de l'usager à l'aide d'un dialogue (<tt>JOptionPane</tt>). Suspendre une connexion implique que le client cesse toute communication avec le serveur.</p> 
<p><img name="exempleClientDialogue" src="exempleClientDialogue.gif" width="384" height="121" border="0" alt=""></p> 
<p>Le client doit permettre d'activer et de désactiver l'envoie de requ&ecirc;tes de formes au serveur, seulement lorsqu'une connexion est établie. Lorsque l'envoie est activé, le client reçoit, une &agrave; une, les formes re&ccedil;ues du serveur. Le client affiche seulement les 10 formes les plus récentes, la forme la plus ancienne doit &ecirc;tre effac&eacute;e pour permettre &agrave; une nouvelle forme de s'afficher.</p> 
<p>Les formes doivent &ecirc;tre remplies et donc, ne doivent pas afficher que leurs contours. Il est conseill&eacute; d'utiliser une couleur unique pour chaque type de forme afin de bien discerner les formes semblables (carr&eacute; vs rectangle).</p> 
<p>Voici une saisie d'&eacute;cran d'une r&eacute;alisation du client. On y voit clairement les dix derni&egrave;res formes re&ccedil;ues du serveur.</p> 
<p><img name="exempleClient" src="exempleClient.gif" width="517" height="569" border="0" alt=""></p> 
<h2>Contraintes de conception</h2> 
<ol> 
  <li>Le programme doit &ecirc;tre r&eacute;alis&eacute; suivant la programmation orient&eacute;e objet (plut&ocirc;t que proc&eacute;durale). Si vous ne vous sentez pas bien avec les concepts de base en orient&eacute; objet (classe, sous-classe, h&eacute;ritage), vous devrez contacter imm&eacute;diatement un professeur avant de continuer avec ce laboratoire&nbsp;!</li> 
  <li>Chaque forme doit &ecirc;tre d&eacute;crite par une sous-classe diff&eacute;rente de la classe m&egrave;re <tt>Forme</tt>, qui sera une classe abstraite. C'est &agrave; dire que l'utilisation de l'h&eacute;ritage est obligatoire pour cette partie au moins. Faites attention de ne pas en abuser, par contre! Il se peut que vous n'ayez pas besoin de faire une classe pour chaque type de forme. Soyez pr&ecirc;t &agrave; d&eacute;fendre votre choix de conception en consid&eacute;rant les points fort et faible de votre choix. <strong>Pour des raisons p&eacute;dagogiques, il est d&eacute;fendu d'utiliser le type interface <tt>Shape</tt> de l'API Java.</strong></li> 
  <li>La classe qui s'occupe de la communication doit &ecirc;tre diff&eacute;rente de la classe d'affichage. </li> 
  <li>Il doit y avoir une classe qui g&eacute;n&egrave;re les formes concr&egrave;tes, c'est &agrave; dire les instances des sous-classes de la classe Forme (Ovale, Rectangle, etc.). Cette classe cr&eacute;atrice fournira une m&eacute;thode qui prend comme argument une String qui d&eacute;crit la forme -- c'est en fait la cha&icirc;ne de caract&egrave;res provenant du serveur. Cette m&eacute;thode retournera un objet de type Forme, mais l'objet retourn&eacute; sera une forme concr&egrave;te (une instance de l'une des sous-classes). Le but est que toutes les instructions de <strong>new</strong> pour les sous-classes de forme se trouvent uniquement dans cette classe. <br /> 
    <br /> 
    En bref, il devrait y avoir, dans votre programme, une classe contenant une méthode avec la signature suivante&nbsp;: (le nom de la classe et celui de la méthode sont laissés à votre discrétion, mais on doit retrouver quelque chose qui ressemble à cela dans votre code)</span> 
    <pre class="codeExample">
&nbsp;
public class CreateurFormes {

    // ...

    /**
     * Crée une nouvelle forme. Cette méthode reçoit la cha&icirc;ne de
     * caractères provenant du serveur de formes, elle détermine de quelle
     * forme il s'agit et applique l'opérateur new sur le constructeur de
     * la forme désirée.
     *
     * @param chaineForme un objet String contenant la chaîne de caractères
     *                    qui décrit une forme et provenant du serveur de
     *                    formes.
     *
     * @return une instance d'une des sous-classes de la classe abstraite
     *         Forme avec les paramètres passés par la chaîne d'entrée.
     */
    public Forme creerForme(String chaineForme) {

        // ...

    }

    // ...
}
&nbsp;
</pre> 
  </li> 
  <li>Il doit y avoir une classe qui s'occupe de décomposer la chaîne de caractères reçue du serveur. Cette classe offre des méthodes nécessaires à l'obtention des diverses informations (noSéq, type, ...). Pour décomposer la chaîne, vous devez utiliser une expression rationnelle (en anglais &quot;regular expression&quot;) avec les classes de <tt>java.util.regex</tt>, telle que dans <a href="expressionsRationnelles.htm">cet exemple</a>.</li> 
  <li>Les formes doivent &ecirc;tre stock&eacute;es dans un tableau en Java (array), afin de montrer que vous ma&icirc;trisez la syntaxe des tableaux en Java. <strong>Pour les raisons p&eacute;dagogiques, il est d&eacute;fendu d'utiliser le type inteface <tt>Collection</tt> de l'API Java.</strong></li> 
  <li>Vous devez utiliser <a href="ApplicationSwing.zip">ce squelette pour une application Swing</a> ayant un fil (Thread) qui s'occupe du traitement des informations provenant du serveur.</li> 
</ol> 
<h3>IDLogger</h3> 
<p>Pour valider une partie du fonctionnement de votre application, vous devrez utiliser la classe IDLogger du package <a href="ca.etsmtl.log.util.jar">ca.etsmtl.log.util.jar</a>. Voici comment cette classe devrait &ecirc;tre utilis&eacute;e dans votre programme : </p> 
<blockquote> 
  <p class="codeExample">import ca.etsmtl.log.util.IDLogger;<br> 
    <br> 
    ...<br> 
    <br> 
    IDLogger logger = IDLogger.getInstance(); //M&eacute;thode statique<br> 
    <br> 
    ...<br> 
    <br> 
    logger.logID(id); //le id &eacute;tant un int repr&eacute;sentant le num&eacute;ro de s&eacute;quence re&ccedil;u</p> 
</blockquote> 
<p>Donc, pour chaque forme re&ccedil;ue, vous devrez d&eacute;cortiquer le num&eacute;ro de s&eacute;quence (nseq) et utiliser le classe IDLogger pour ajouter le num&eacute;ro de s&eacute;quence au journal, qui servira de fichier de validation.</p> 
<p>Pour utiliser IDLogger avec Eclipse, vous devez informer Eclipse d'utiliser les classes qui se trouvent dans le fichier Java Archive (.jar) <a href="ca.etsmtl.log.util.jar">ca.etsmtl.log.util.jar</a>. Une façon d'y arriver consiste à </p> 
<ol> 
  <ol> 

    <li>copier le fichier ca.etsmtl.log.util.jar dans le répertoire de votre projet,</li> 
    <li>sélectionner votre projet dans la fenêtre "Package Explorer", </li> 
    <li>sélectionner le menu "File", "Properties", </li> 
    <li>sélectionner "Java Build Path" dans la liste des propriétés, </li> 
    <li>choisir l'onglet "Libraries", </li> 
    <li>cliquer sur le bouton "Add External JARs...", </li> 
    <li>sélectionner le fichier ca.etsmtl.log.util.jar (il faut le rep&eacute;rer sur le disque), </li> 
    <li>fermer le dialogue "Properties for ..." en cliquant sur le bouton OK. </li> 
  </ol> 
</ol> 
<p>Pour utiliser IDLogger dans une console, vous devez également informer Java de l'existance de l'archive ca.etsmtl.log.util.jar. Il suffit d'ajouter dans la variable d'environnement ClassPath la localisation de l'archive. Par exemple, si l'archive ca.etsmtl.log.util.jar se trouve dans même répertoire que le reste de votre laboratoire, vous pouvez taper dans un shell Dos : </p> 
<blockquote> 
  <p class="codeExample">set ClassPath=%ClassPath%;.\ca.etsmtl.log.util.jar  
</blockquote> 
<p>Ainsi lorsque vous lancerez l'une ou l'autre des commandes :
<blockquote> 
  <p class="codeExample">javac *.java<br> 
    java monLab1  
</blockquote> 
<p>Java saura où trouver la classe IDLogger.
<h2>Planification et d&eacute;roulement du travail</h2> 
<p>Ce projet repr&eacute;sente beaucoup de d&eacute;fis. Donc, il faudra bien s'organiser afin d'atteindre le but dans le temps allou&eacute;. Voici quelques strat&eacute;gies pour vous aider &agrave; r&eacute;ussir&nbsp;:</p> 
<ul> 
  <li>D&eacute;composer le travail en sous t&acirc;ches, par exemple, la conception et programmation du code pour&nbsp;:
    <ul> 
      <li>la communication avec le socket TCP</li> 
      <li>le d&eacute;corticage d'une balise et la g&eacute;n&eacute;ration de sa forme correspondante</li> 
      <li>l'affichage des formes</li> 
      <li>la gestion de liste de formes</li> 
      <li>l'int&eacute;gration des &eacute;l&eacute;ments</li> 
    </ul> 
  </li> 
  <li>Faire un estim&eacute; de combien de temps &ccedil;a va prendre pour chaque sous t&acirc;che.</li> 
  <li>Fixer les dates pour des &eacute;v&eacute;nements jalons. Par exemple, &agrave; la fin de la premi&egrave;re semaine, la sous t&acirc;che X sera compl&eacute;t&eacute;e. </li> 
  <li>Commencer les sous t&acirc;ches o&ugrave; vous vous sentez le moins &agrave; l'aise <strong>au plus t&ocirc;t possible</strong>. Le but est d'&eacute;liminer les incertitudes le plus vite possible.</li> 
  <li>Revoir votre plan au moins une fois par semaine pour l'ajuster au fur et &agrave; mesure que vous avancez.</li> 
</ul> 
<h2>Rapport de laboratoire</h2> 
<p>Remettez un rapport compos&eacute; au maximum de 8 pages, excluant la page titre et la table des matières. Le rapport doit contenir : </p> 
<ul>
  <li>Au moins un diagramme de classes avec explication.</li>
  <li>Un diagramme de s&eacute;quence avec explication pour établir une connexion.</li>
  <li>Un diagramme de s&eacute;quence avec explication pour activer l'envoie des requêtes.</li>
  <li>Quatre nouvelles d&eacute;cisions de conception expliqu&eacute;e
      <ul>
        <li>Expliquez les probl&egrave;mes rencontr&eacute;s</li>
        <li>D&eacute;crivez les solutions retenues</li>
        <li>Discutez des alternatives consid&eacute;r&eacute;es </li>
        <li>Discutez des am&eacute;liorations possibles (par exemple, si vous aviez le droit d'utiliser Shape, etc).</li>
      </ul>
  </li>
  <li>Quatre d&eacute;cisions d'impl&eacute;mentation expliqu&eacute;es.</li>
  <li>Une discussion sur les forces et les faiblesses en termes de couplage et de coh&eacute;sion du code que vous avez &eacute;crit. Par exemple, est-ce que le code permet d'&eacute;tendre ais&eacute;ment les fonctionnalit&eacute;s du logiciel?.</li>
</ul>
<p>Attention &agrave; la qualit&eacute; du fran&ccedil;ais (jusqu'&agrave; 10%).</p>
<p>Attention au plagiat!!! </p>
<h2>Boni</h2> 
<p>&Agrave; faire seulement si vous avez r&eacute;alis&eacute; toutes les fonctionnalit&eacute;s de base pour ce laboratoire.
<h3>Tol&eacute;rance aux pannes (fiabilit&eacute;) </h3> 
<p>Vous pouvez gagner un bonus si votre client traite correctement les fautes suivantes&nbsp;:</p> 
<ul> 
  <li>Mauvaise sp&eacute;cification de nom de la part de l'usager (erreur DNS). Votre client doit bien indiquer &agrave; l'usager qu'il s'agit d'un nom non valable au moment de la tentative de faire la connexion au serveur. </li> 
  <li>Tentative de connexion &agrave; un serveur qui n'est pas d&eacute;marr&eacute;. Votre client doit bien indiquer &agrave; l'usager que le serveur &quot;X&quot; ne r&eacute;pond pas sur le port &quot;Y&quot; (par exemple). Ce n'est pas la m&ecirc;me chose qu'une erreur DNS.</li> 
  <li>Terminaison impr&eacute;vue du serveur. Votre client doit bien indiquer &agrave; l'usager que le serveur s'est arr&ecirc;t&eacute;.</li> 
  <li>Terminaison impr&eacute;vue du client. Si l'usager termine l'application (en cliquant sur le &quot;X&quot; dans l'interface GUI), votre client doit bien fermer la connexion avec le serveur en envoyant un &quot;END&quot;. Le serveur indiquera si une connexion ne se ferme pas correctement.</li> 
</ul> 
<p>Note&nbsp;: votre client doit utiliser un dialogue (<tt>JOptionPane</tt>) pour toute erreur indiqu&eacute;e &agrave; l'usager <strong>ET</strong> autant possible, il devrait retourner &agrave; un &eacute;tat o&ugrave; l'usager peut choisir les articles d'un menu, etc. </p> 
<h2>Nombre de s&eacute;ances</h2> 
<p>Vous avez quatre s&eacute;ances de trois heures pour r&eacute;aliser ce laboratoire.</p> 
<h2>Documents, fichiers et indices utiles</h2> 
<p><a name="ServeurForme"></a><a href="ServeurForme.jar">ServeurForme.jar</a> - la version Swing du serveur de forme. On le d&eacute;marre avec la commande suivante: </p> 
<blockquote> 
  <p><span class="codeExample">java -jar ServeurForme.jar [-port num&eacute;ro_de_port] [-seed semence_all&eacute;atoire]</span></p> 
</blockquote> 
<p><a href="ca.etsmtl.log.util.jar">ca.etsmtl.log.util.jar</a> - la classe IDLogger &agrave; utiliser obligatoirement pour la validation de votre client.</p> 
<p> Pour vous assurez que vous affichez les formes correctement, on vous fournit ce petit <a href="monServeurDeFormes.htm">serveur de formes</a> maison.</p> 
</body>
</html>